1
00:00:00,00 --> 00:00:06,600
Is it possible to create an AI pair programmer as code coding language? In this video, 

2
00:00:06,600 --> 00:00:12,160
I'm looking to hook up a domain specific language to an Aider application running 

3
00:00:12,160 --> 00:00:15,100
within a web server. I'm AppyDave. Let's get into it.

4
00:00:16,00 --> 00:00:21,10
Now, if you don't know what Aider AI is, its essentially an AI pair programmer that 

5
00:00:21,10 --> 00:00:25,700
you can run either within a terminal or from the command line. And the first video 

6
00:00:25,700 --> 00:00:30,500
in this series I show how to install and get it running with a basic application. 

7
00:00:30,500 --> 00:00:35,210
I then moved on to the second video in the series, in which I created some presentation 

8
00:00:35,210 --> 00:00:40,600
software using Reveal.js and Scalable Vector Graphics, and you can find the repo 

9
00:00:40,640 --> 00:00:42,40
here at AppyDave.

10
00:00:42,230 --> 00:00:47,960
We then took that presentation a step further in the third video, using Aider image 

11
00:00:47,960 --> 00:00:54,390
to code generation techniques, we were able to generate both data and CSS files based 

12
00:00:54,390 --> 00:00:56,820
off mocks that we'd created in Canva.

13
00:00:57,600 --> 00:01:01,770
Now, in this video, I want to take a little application that we developed in the 

14
00:01:01,770 --> 00:01:08,90
fourth video, where we were iterating over dozens of files to create documentation 

15
00:01:08,90 --> 00:01:14,370
for id Software's Doom, and that particular documentation came out looking in markdown 

16
00:01:14,370 --> 00:01:19,310
format. But it's that particular tool that I want to hook up to a programming language 

17
00:01:19,310 --> 00:01:21,540
so that we can call a web server 

18
00:01:21,760 --> 00:01:27,360
So the web server that we created in the fifth video hosts Aider I behind a RESTful 

19
00:01:27,360 --> 00:01:33,210
endpoint. And today what we're going to do is create an AI programmer as code coding 

20
00:01:33,210 --> 00:01:35,430
language to talk to this web server.

21
00:01:35,730 --> 00:01:40,880
So for this test case, I thought we'd create a folder called Aider Klue playground. 

22
00:01:40,910 --> 00:01:45,110
I'll talk about what Klue is in a moment, and we'll be working on creating some code 

23
00:01:45,130 --> 00:01:46,10
or reports, 

24
00:01:46,30 --> 00:01:51,40
where we should start is just go to the game of doom by id software. They've got 

25
00:01:51,40 --> 00:01:55,240
a lot of code files that we can work through. We've got header and C files. We've 

26
00:01:55,240 --> 00:01:58,870
got all the documentation that we created in the last video, 

27
00:01:58,900 --> 00:01:59,420
and 

28
00:01:58,930 --> 00:02:04,420
we can use our little programming language to talk with this repo and write to this 

29
00:02:04,420 --> 00:02:05,50
repo.

30
00:02:05,730 --> 00:02:10,980
So I think how we can start is with the little web server that we created the other 

31
00:02:10,980 --> 00:02:11,250
day. 

32
00:02:11,260 --> 00:02:16,500
we'll just start that on a particular port, and we can test it with a curl command. 

33
00:02:16,530 --> 00:02:21,180
That's just giving some instructions and the location of the target folder. 

34
00:02:21,200 --> 00:02:26,560
We'll just copy the path from the playground. And we're going to put in some code 

35
00:02:26,560 --> 00:02:31,330
here. So let's just change that right there. And we'll create an instruction. And 

36
00:02:31,330 --> 00:02:36,670
the instruction I think we should go with is create reader JS. It should read the 

37
00:02:36,670 --> 00:02:41,140
column names. And the column names are going to come from this table of contents 

38
00:02:41,140 --> 00:02:46,390
CSV that I've put together. And from there we just want to print it out into a tabular 

39
00:02:46,390 --> 00:02:50,920
report. So we'll just bring it all into one line. We'll copy that and we'll come 

40
00:02:50,920 --> 00:02:56,320
over to this instruction and we'll paste it in here. And from this point we should 

41
00:02:56,320 --> 00:02:58,600
just be able to run it from the command line.

42
00:02:59,130 --> 00:03:03,860
So we'll make sure that we're on the right port and we'll put everything onto one 

43
00:03:03,860 --> 00:03:08,900
particular line. And from there, we should just be able to copy it and paste it directly 

44
00:03:08,900 --> 00:03:13,400
in here. Now the curl request doesn't really matter where it runs. It just needs 

45
00:03:13,400 --> 00:03:17,810
to point at the web server and have a folder where it would like code to be written. 

46
00:03:17,810 --> 00:03:22,670
So at the moment it's writing some code. We've got a yes. So we'll want to automate 

47
00:03:22,670 --> 00:03:26,930
that in this particular video. We didn't automate it in the last one. And what should 

48
00:03:26,930 --> 00:03:31,580
be happening is we've just had a file created that's looking good. 

49
00:03:31,590 --> 00:03:36,870
a quick node install and we'll just put in some data. We'll put in one, two, three 

50
00:03:36,870 --> 00:03:41,530
and we'll just run this reader and see what we get. And we are reading the file. 

51
00:03:41,530 --> 00:03:43,950
So we've got a little bit of code running.

52
00:03:44,390 --> 00:03:49,410
So what I want to test now is just the gathering of files. So we've got the documentation 

53
00:03:49,410 --> 00:03:53,910
for the doom application here. And if we look at the doom application we've got H 

54
00:03:53,940 --> 00:04:00,990
files C files we've got docs. And if we run a little GPT context tool, which is what 

55
00:04:00,990 --> 00:04:05,130
we're going to run the behind the scenes with the coding language, we should get 

56
00:04:05,130 --> 00:04:09,330
a list of all the files. Now, if we just run that one more time and we'll just do, 

57
00:04:09,360 --> 00:04:14,100
say the H files, we should just get a list of the files that are headers 

58
00:04:14,130 --> 00:04:18,130
and we can take this a little bit further and just say we want the IPX folder and 

59
00:04:18,130 --> 00:04:22,120
see what we get there. So we've just got four directories. So this is what we're 

60
00:04:22,120 --> 00:04:23,500
hooking up to our DSL.

61
00:04:24,90 --> 00:04:29,560
When we were generating documentation for doom, this was the technique we used. But 

62
00:04:29,560 --> 00:04:34,510
instead of using tree format, we used the Aider format and we would build up prompts 

63
00:04:34,510 --> 00:04:39,70
basically on the same sort of files that we just saw listed there. But let's now 

64
00:04:39,110 --> 00:04:43,750
move this into a coding language, which will be a lot easier to work with.

65
00:04:44,330 --> 00:04:49,140
Now to get started. We'll come over to our playground here. We'll go new file and 

66
00:04:49,140 --> 00:04:54,330
the file will go with is get docs, I think. Sounds good. We'll call it clue. This 

67
00:04:54,330 --> 00:04:58,600
will make sense a bit later. So we've got this new file and we'll just put in some 

68
00:04:58,600 --> 00:05:02,700
sort of structure. So I'll go with talk to Aider for want of a better word. 

69
00:05:03,160 --> 00:05:07,320
So next we'll go down to the terminal and we'll put in this command called Langcraft. 

70
00:05:07,720 --> 00:05:11,770
And I'm going to show you the video that this is related to. And we're just going 

71
00:05:11,770 --> 00:05:17,500
to watch the folder that we're on and format for enhanced output. So what happens 

72
00:05:17,500 --> 00:05:22,660
now when we come here and we hit save. We should get a new file created next to it. 

73
00:05:22,660 --> 00:05:27,40
So we'll just move that down below. And we can see that whatever we put in here, 

74
00:05:27,40 --> 00:05:33,280
if we say x-men and we say do and we say end and we hit save, we'll get a new value 

75
00:05:33,280 --> 00:05:34,480
called X-Men.

76
00:05:35,260 --> 00:05:39,820
Now having a node called x mean is not very useful. But if we look at the doom with 

77
00:05:39,820 --> 00:05:44,740
dots folder, what we should be able to do instead is replace this with something 

78
00:05:44,740 --> 00:05:49,540
called file collector. And with that we just list the actual folder we want to collect 

79
00:05:49,540 --> 00:05:54,550
from. Now, if we hit save on this, what should happen is we get that information 

80
00:05:54,550 --> 00:05:59,290
coming through. Plus it's figured out where there might be files to work with. So 

81
00:05:59,290 --> 00:06:02,680
let's see if we can now populate this with a set of files.

82
00:06:03,760 --> 00:06:08,140
When we run it from the command line, we did GPT context, we had the folder that 

83
00:06:08,140 --> 00:06:13,780
we wanted to work with and we did the IPX directory, *. H. What we'll do over here 

84
00:06:13,780 --> 00:06:18,220
is we'll put in our files node and we'll say include, and it's going to work from 

85
00:06:18,220 --> 00:06:22,780
the same folder as we have here. We'll just work with the C files. And for now, let's 

86
00:06:22,780 --> 00:06:27,640
do everything. So we get everything and we get all the files that are in the IPX 

87
00:06:27,640 --> 00:06:31,30
directory. We get all the files that are in the DOOM directory. 

88
00:06:31,60 --> 00:06:36,580
so if we come up here and we say IPX and we hit save, we should get a smaller set 

89
00:06:36,580 --> 00:06:40,660
of files. So we've just got three. And the good thing is we've also got the content 

90
00:06:40,660 --> 00:06:45,790
of each of these files. Now, just like the command line one, we can also do exclusions. 

91
00:06:45,790 --> 00:06:50,830
So if we type in exclude, and let's just go IPX, 

92
00:06:50,830 --> 00:06:56,750
and we'll just say Doom star and hit save. The one of these files should just disappear 

93
00:06:56,750 --> 00:06:57,270
for us. So we 

94
00:06:57,300 --> 00:07:01,740
We've got the IPX set up. And again, if we want to come out and get the MD files, 

95
00:07:02,530 --> 00:07:07,340
And I might want to exclude the README files that have the lowercase read in front 

96
00:07:07,340 --> 00:07:12,20
of them. So these two files that are just here should disappear when I hit save. 

97
00:07:12,30 --> 00:07:16,920
Now you may be wondering, where did this bin langcraft come from? So a couple of 

98
00:07:16,920 --> 00:07:21,780
months ago I did these videos on AI programming languages. Building one. We've got 

99
00:07:21,810 --> 00:07:25,950
one called Build Your Own Programming Language, where I work with the GPT context 

100
00:07:25,980 --> 00:07:30,870
gatherer. To do that, there's also the 1000 file changes, which is where I'm working 

101
00:07:30,870 --> 00:07:34,620
with Cursor, AI and Git diff to do bulk updates. 

102
00:07:34,630 --> 00:07:39,660
So check out those videos if you want to understand more how I'm going from coding 

103
00:07:39,660 --> 00:07:43,290
language to data using this little watcher.

104
00:07:43,290 --> 00:07:48,140
The next thing I would like to do is take the information that we've got here and 

105
00:07:48,140 --> 00:07:50,930
make it available to our aider web server. 

106
00:07:50,960 --> 00:07:54,840
if we go back and have a look at the terminal where we're running the aider web server, 

107
00:07:54,840 --> 00:07:59,520
we can see that it's running on a particular port. Now I'm just going to take a copy 

108
00:07:59,520 --> 00:07:59,790
of that.

109
00:07:59,990 --> 00:08:05,120
And this will be useful because one of the parameters is a webhook URL that we can 

110
00:08:05,120 --> 00:08:10,370
call. So if we restart this and we'll put in dash you and we'll just paste that value 

111
00:08:10,370 --> 00:08:15,710
in. And as it restarts now when we hit save it should pass it to an endpoint. Now 

112
00:08:15,710 --> 00:08:20,120
that's probably not the endpoint we want. Let's just call it X-Men for now. 

113
00:08:20,130 --> 00:08:24,480
We're going to have to handle this incoming data in the Aider web server.

114
00:08:25,260 --> 00:08:30,390
So we'll come over to the Aider web server and we'll implement this X-Men routine. 

115
00:08:30,420 --> 00:08:36,480
So to start off with, we could have a look at the original Code Assistant, which 

116
00:08:36,480 --> 00:08:40,740
is what we'll use Aider to do the work, but we're not quite ready for that. Instead, 

117
00:08:40,740 --> 00:08:46,50
we'll just put in a stub, we'll call it X-Men, and all it really needs to do is read 

118
00:08:46,50 --> 00:08:50,70
the incoming data and check that. That's okay. So hit save on that.

119
00:08:47,430 --> 00:08:52,550
So we'll hit save on that and we'll head over to the terminal and we'll restart the 

120
00:08:52,790 --> 00:08:53,480
server 

121
00:08:54,90 --> 00:08:58,880
it should get sent through to the X-Men folder. One of the things that should happen 

122
00:08:58,880 --> 00:09:03,680
along the way is this file should get updated. So what we'll do is we'll just clear 

123
00:09:03,680 --> 00:09:09,140
that out for now and we'll hit save. And let's see what happens. So it's been updated 

124
00:09:09,140 --> 00:09:09,710
with data. 

125
00:09:09,730 --> 00:09:14,180
it's come through to the X-Men endpoint and we can see that the information is coming 

126
00:09:14,180 --> 00:09:14,720
in here. 

127
00:09:14,730 --> 00:09:17,610
One of the things that you can notice is there's a clue type. It's called talk to 

128
00:09:17,610 --> 00:09:23,310
aider. So if we really wanted to change the nature of the programming language, 

129
00:09:23,190 --> 00:09:28,190
we might wanna call it AI pair coder, and this information could come through 

130
00:09:28,960 --> 00:09:31,440
We should see that coming in right here 

131
00:09:31,790 --> 00:09:36,800
Now I've made a few changes to the X-Men routine. I want to bring it into alignment 

132
00:09:36,800 --> 00:09:41,510
with the original code assistant, and it could take in an instruction, a list of 

133
00:09:41,510 --> 00:09:46,130
files, directories, etc. now, the only thing that we're interested in right now are 

134
00:09:46,130 --> 00:09:51,530
the files. So the files are being processed down here. As for an instruction, we'll 

135
00:09:51,530 --> 00:09:54,500
just go with tell me something would be useful 

136
00:09:54,530 --> 00:10:00,30
and we'll get it to just print out some information in the console. So if we come 

137
00:10:00,30 --> 00:10:06,580
down here we've got the IPX MD files. If we hit save on that we should get an update. 

138
00:10:06,700 --> 00:10:11,910
And we can see the files to be processed are coming through. If we get rid of the 

139
00:10:11,910 --> 00:10:18,340
IPX and go for the whole system, we should just get a lot more from multiple subfolders.

140
00:10:19,260 --> 00:10:23,750
Let's try and expand this X-Men function. So it has more in common with the code 

141
00:10:23,750 --> 00:10:27,590
assistant. So currently it can take these various options in. 

142
00:10:27,600 --> 00:10:32,920
this has only got a fixed instruction and it will collect the files, but we better 

143
00:10:32,920 --> 00:10:36,730
go and update our little programming language, which is this one here on the left, 

144
00:10:36,760 --> 00:10:38,370
it can support these concepts. 

145
00:10:38,390 --> 00:10:43,210
we can just make this up and I'm just gonna call it rules for now. And within the 

146
00:10:43,210 --> 00:10:49,00
rules we might say that instruction, which we will have it mapped to something is, 

147
00:10:49,630 --> 00:10:55,920
tell me something more. So just a slightly different value coming in on that we could 

148
00:10:55,920 --> 00:11:00,270
put in the model, but I won't do that for now. I will do the directory 'cause I think 

149
00:11:00,270 --> 00:11:01,570
that will be a useful, 

150
00:11:01,600 --> 00:11:03,490
concept for us to put in place. 

151
00:11:04,130 --> 00:11:08,890
And I've just put in this value where we want to write code to. So this is where 

152
00:11:08,890 --> 00:11:14,350
we're reading information from. Then we're sending it to Aider. And Aider has been 

153
00:11:14,350 --> 00:11:18,820
given an instruction and the list of files that it needs to work with. And we have 

154
00:11:18,820 --> 00:11:22,750
the directory we would like Aider to work into. Now if I hit save at the moment, 

155
00:11:22,900 --> 00:11:27,790
what will happen is we will get an enhanced document that's now a little bit different. 

156
00:11:27,910 --> 00:11:32,20
It's got rules in it, it's got the instruction, the directory, it's got the file 

157
00:11:32,20 --> 00:11:36,280
collector. And if we look down lower, it's still got, the files that have been processed 

158
00:11:36,430 --> 00:11:41,530
are all going through to this endpoint. But the endpoint at the moment doesn't know 

159
00:11:41,530 --> 00:11:44,860
how to handle these two parameters. So we just need to hook it up.

160
00:11:45,500 --> 00:11:50,60
So the code has been updated with a bunch of rules, and we'll just paste them in 

161
00:11:50,60 --> 00:11:53,90
and we can just restart the web server. 

162
00:11:53,100 --> 00:11:57,810
these values should come through and get printed out. So it's a dry run, meaning 

163
00:11:57,810 --> 00:12:03,510
we're not actually going to invoke Aider when we set this to true. There is an instruction 

164
00:12:03,530 --> 00:12:06,120
we'll just say whatever in here 

165
00:12:06,130 --> 00:12:10,350
and we can see that that's coming through. There would be the target folder or project 

166
00:12:10,350 --> 00:12:15,240
that we'd like to write to. And then there's the list of files. Now I've also put 

167
00:12:15,240 --> 00:12:20,370
in this model as default. We'll let Aider figure that out for itself. But we could 

168
00:12:20,370 --> 00:12:25,740
override it if we want. And the confirm is basically the idea of should it automatically 

169
00:12:25,740 --> 00:12:27,540
write files yes or no? 

170
00:12:27,560 --> 00:12:32,290
This will be the incoming path that we come in on. We'll start the Python server 

171
00:12:32,290 --> 00:12:36,880
that's now running. Let's go and start the langwatch. But let's make sure that the 

172
00:12:36,880 --> 00:12:41,860
web hook that it talks to is this new value called clue. And we'll press enter on 

173
00:12:41,860 --> 00:12:45,130
that and we'll leave dry run turned on 

174
00:12:45,130 --> 00:12:49,750
So we've got an instruction coming through, we've got a directory, which is not correct. 

175
00:12:49,840 --> 00:12:56,200
We're on a dry run, which is great. Let's just change the dry run to false and see 

176
00:12:56,200 --> 00:12:59,890
what happens. Especially considering we don't have a good directory name. 

177
00:13:00,760 --> 00:13:05,480
and it's reporting an error that no such file or directory exists, which is great.

178
00:13:07,00 --> 00:13:11,680
Now what I wanna do is the first test. Now I don't think I've got the alignment quite 

179
00:13:11,680 --> 00:13:16,240
correct with this, but let's talk through it. We're going to read from this folder 

180
00:13:16,240 --> 00:13:22,510
here, which is the Doom with docs. And we're specifically looking at the IPX directory, 

181
00:13:22,510 --> 00:13:27,820
the markdown documents. There's three of them going on here. Now if we go and hit 

182
00:13:27,820 --> 00:13:31,300
save, we can see that the information should come through. 

183
00:13:31,300 --> 00:13:35,730
But if we look at the JSON document, we can see the content for each of these three 

184
00:13:35,730 --> 00:13:41,910
files. But this information isn't currently being used in aider only the file name 

185
00:13:41,910 --> 00:13:46,230
is being used. And this could be a bit of an issue. What we'll also do, we've got 

186
00:13:46,230 --> 00:13:47,430
dry run turned off, 

187
00:13:47,430 --> 00:13:51,120
we've got update the TOCs CSV file, which is this file here, 

188
00:13:51,130 --> 00:13:55,440
and we just need to change the directory. So we'll change it to this and we'll hit 

189
00:13:55,440 --> 00:14:00,720
save and let's see what starts to happen. So it says it's creating three files. Now 

190
00:14:00,720 --> 00:14:05,250
why is that? Because there's already three files that exist, and it's because when 

191
00:14:05,250 --> 00:14:09,270
we set the target, which is here, this is in an area 

192
00:14:09,300 --> 00:14:12,570
that doesn't have those files. So they're being created for us. 

193
00:14:12,600 --> 00:14:18,370
and it's telling me to please provide the contents of the TOC file. So the first 

194
00:14:18,370 --> 00:14:21,790
thing I think we need to do is bring it back to just one directory. 

195
00:14:21,800 --> 00:14:26,570
So where we read from and where we write to probably need to be the same with the 

196
00:14:26,570 --> 00:14:28,220
current state of the application.

197
00:14:28,760 --> 00:14:30,490
So reading from here will 

198
00:14:30,500 --> 00:14:34,430
going to write into this project and we're going to read from this project. So we've 

199
00:14:34,430 --> 00:14:39,170
got the reading okay. But the writing is not in the right location. So what we'll 

200
00:14:39,170 --> 00:14:44,210
do is we'll change the folder that it's writing to. The other thing is that it will 

201
00:14:44,210 --> 00:14:50,720
want access to the TOC.CSV, but we haven't included it in our files when we're talking. 

202
00:14:50,720 --> 00:14:57,800
So let's just go include and we'll say TOC.CSV. But I'm also going to take a copy 

203
00:14:57,800 --> 00:15:02,90
of the one that we had in this project, and I'm just going to make it available within 

204
00:15:02,90 --> 00:15:03,140
this project.

205
00:15:03,800 --> 00:15:06,910
we've got a bunch of information being changed.

206
00:15:06,930 --> 00:15:11,970
So we've had some partial success. We can see the name of the file coming through. 

207
00:15:12,00 --> 00:15:16,530
We can see a description, but I can't quite tell whether it's a good description. 

208
00:15:16,530 --> 00:15:21,690
what I've gone and done is create a cat and a markdown document. We'll see what happens 

209
00:15:21,690 --> 00:15:26,190
there. Then in the prompt originally I talked about 25 words and it's kind of put 

210
00:15:26,190 --> 00:15:27,720
the 25 words here. 

211
00:15:27,730 --> 00:15:32,860
I've just modified this instruction a little bit, see if we can get better data. 

212
00:15:32,860 --> 00:15:39,490
And I might even just delete everything that's in here. Lastly, let's improve this 

213
00:15:39,490 --> 00:15:44,770
so that we're also getting all the markdown documents and see what happens. So 

214
00:15:44,760 --> 00:15:49,700
Now it's a little bit better on the descriptions. It's also got some numbers that 

215
00:15:49,700 --> 00:15:52,370
are looking closer, but they're not actually accurate. 

216
00:15:52,400 --> 00:15:54,550
and then it's got this opinion about the cat, 

217
00:15:54,560 --> 00:15:59,140
and then there's a story about a fox jumping over lazy dog and then moving over the 

218
00:15:59,140 --> 00:16:01,540
sleeping cat. So this all seems good. 

219
00:16:01,560 --> 00:16:06,50
so if we make this a double asterisk, we should now be able to work through another 

220
00:16:06,50 --> 00:16:07,580
60 odd files.

221
00:16:08,300 --> 00:16:13,680
And so now it's working through all the different files that are in the Linux Doom 

222
00:16:13,680 --> 00:16:14,640
directory.

223
00:16:24,200 --> 00:16:26,790
So at this point I hit a token limit 

224
00:16:26,800 --> 00:16:31,60
I've just gone and changed it to just the I underscore files 

225
00:16:31,60 --> 00:16:35,260
And let's just bring in anything that starts with a P as well. 

226
00:16:36,660 --> 00:16:41,50
Now you can see that we were able to read through all the markdown documents by just 

227
00:16:41,50 --> 00:16:46,450
saying, including star, star markdown. We said update the table of contents CSV, 

228
00:16:46,450 --> 00:16:50,470
and we're basically got a summary of each of the markdown documents.

229
00:16:51,500 --> 00:16:56,720
I made a couple of syntax changes by loading in, for instance, prompts that we might 

230
00:16:56,720 --> 00:17:00,650
want to use from the file system. So there's a complex prompt that we're about to 

231
00:17:00,680 --> 00:17:06,530
go through. And it's just being interpolated into a pre prompt right here along with 

232
00:17:06,530 --> 00:17:11,120
folders being loaded in. I've also changed it from taught to Aider to just plain 

233
00:17:11,150 --> 00:17:15,470
Aider. And that just required that the web server be modified to deal with this new 

234
00:17:15,470 --> 00:17:16,970
node coming in.

235
00:17:17,60 --> 00:17:22,990
we have our aider coding construct here, and it's going to read from the Doom Documentation 

236
00:17:22,990 --> 00:17:28,480
folder, which is here, but specifically it's only going to look in the IPX directory 

237
00:17:28,750 --> 00:17:33,760
for the C files. And there's about three of them listed in this area. And after that 

238
00:17:33,760 --> 00:17:38,260
we're going to do it as a dry run. So we'll only get data for now where it has a 

239
00:17:38,440 --> 00:17:44,260
prompt called Create code file text for each file based on a prompt. And the prompt 

240
00:17:44,260 --> 00:17:48,430
is going to be read from a file and we can see the information here. And this is 

241
00:17:48,430 --> 00:17:54,460
basically turning C and header files into a format that's readable by a non-developer. 

242
00:17:54,460 --> 00:17:59,290
So it's just a human readable context going on. And we've got a few other options. 

243
00:17:59,300 --> 00:18:04,840
we can see information from the file here. We've got unions, compact memory representations 

244
00:18:04,840 --> 00:18:09,160
here at the end of the prompt, we've got the folder that we are loading in from. 

245
00:18:09,160 --> 00:18:15,250
And we can notice that the three C files have also been loaded along with their content.

246
00:18:15,930 --> 00:18:20,960
Finally, we can remove the dry run flag from the Aider code script. It'll run the 

247
00:18:20,960 --> 00:18:26,660
pre prompt plus the complex prompt, which is going to turn all the C and header files 

248
00:18:26,660 --> 00:18:31,730
into formats that are human readable. We're going to read from the doom with docs 

249
00:18:31,730 --> 00:18:32,240
folder. 

250
00:18:32,260 --> 00:18:39,330
specifically only get the ipx c files. So when we hit save on this, we end up getting 

251
00:18:39,330 --> 00:18:46,320
code being generated by Aider for each of the C files. We've also updated the JSON 

252
00:18:46,320 --> 00:18:50,790
document so we can see the individual files that are going to be worked with. We 

253
00:18:50,790 --> 00:18:55,620
can even see the content that's going to be merged into the documentation.

254
00:18:56,400 --> 00:19:02,570
So the first file called IPX nets can be created. So we'll say yes and we'll say 

255
00:19:02,570 --> 00:19:09,680
yes to doom net and yes to IPX setup dot txt. And we can see the code getting generated 

256
00:19:09,680 --> 00:19:11,240
to go into these files.

257
00:19:12,30 --> 00:19:17,30
The final output is three meta documents. We've got doom net with the function launch, 

258
00:19:17,60 --> 00:19:22,790
doom and three global variables, and then we go on to IPX setup where we've got check, 

259
00:19:22,790 --> 00:19:24,710
param and net ISR.

260
00:19:25,660 --> 00:19:31,180
So finally we have our domain specific language called KlueLess, which is allowing 

261
00:19:31,180 --> 00:19:36,790
us to talk to Aider via a scripting language where it can read files from various 

262
00:19:36,790 --> 00:19:43,330
locations and call the Aider API using the web server that we built in the last video 

263
00:19:43,330 --> 00:19:44,740
to generate code. 

264
00:19:44,760 --> 00:19:50,250
is just a proof of concept to talk to the Aider AI pair programmer, but it's part 

265
00:19:50,250 --> 00:19:56,730
of a broader set of semantically friendly coding languages that I'm exploring so 

266
00:19:56,730 --> 00:20:00,930
that I can communicate with large language models in a more effective manner. So 

267
00:20:00,960 --> 00:20:05,250
if this is a topic you're interested in, please like and subscribe. I'm AppyDave. 

268
00:20:05,250 --> 00:20:06,630
I'll see you in the next video.