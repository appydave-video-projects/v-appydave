1
00:00:00,000 --> 00:00:05,700
How successful is your AI pair programming? Maybe you're using Claude Code, or cursor 

2
00:00:05,700 --> 00:00:10,566
or root code, and you put in best practices like a requirements document, a PRD, 

3
00:00:10,833 --> 00:00:15,500
and a task list, and you're having some success. You're loving the AI pair programming, 

4
00:00:15,500 --> 00:00:19,933
but you notice after a while that just some things don't work out the way you want. 

5
00:00:19,967 --> 00:00:24,800
And you wonder, could you review all the past work that the AI has done and come 

6
00:00:24,800 --> 00:00:29,267
up with a better plan for the future? In this video, we're looking at retrospectives, 

7
00:00:29,267 --> 00:00:34,000
and we're going to see if we can implement an AI retrospective. I'm AppyDave. Let's 

8
00:00:34,000 --> 00:00:34,734
get into it.

9
00:00:34,767 --> 00:00:39,700
So in traditional software development there is a particular methodology known as 

10
00:00:39,734 --> 00:00:45,367
agile. And within that there is a framework known as scrum, in which there's this 

11
00:00:45,367 --> 00:00:51,401
ability for people to work for what's called a sprint, a two week period, as an example, 

12
00:00:51,601 --> 00:00:57,301
to build a section of the software application as a team. And at the end of the sprint, 

13
00:00:57,301 --> 00:01:01,901
there might be something going on called a retrospective, where they look back through 

14
00:01:01,934 --> 00:01:07,101
what worked, what didn't work, and see if they can improve things for the next sprint 

15
00:01:07,101 --> 00:01:08,934
in the software development cycle.

16
00:01:08,968 --> 00:01:14,935
So if your developers are writing code and you notice inefficiency and you talk about 

17
00:01:14,935 --> 00:01:21,035
it in the retrospective, should the same idea be applied to the AI peer programmers 

18
00:01:21,035 --> 00:01:25,968
that we're now using? Now, I've just gone and implemented a whole lot of functionality 

19
00:01:26,035 --> 00:01:31,602
using Claude Code, and everything ran on autopilot. I was pretty happy with the output, 

20
00:01:31,702 --> 00:01:36,768
but I thought there was a little bit of inefficiency that I want to improve the next 

21
00:01:36,768 --> 00:01:40,268
time I write a section of code for this application.

22
00:01:40,302 --> 00:01:44,635
So let's have a quick look at the application that I'm talking about. And this is 

23
00:01:44,635 --> 00:01:49,135
a minimum viable product, an MVP that I've been putting together in the form of a 

24
00:01:49,169 --> 00:01:53,835
wizard. And it's got little capabilities, like a button up here that will preload 

25
00:01:53,835 --> 00:01:58,136
with some data so that when I'm testing the application, I don't have to fill it 

26
00:01:58,136 --> 00:02:04,336
in. When I press next, we go to a new page and I'll press next again, which is actually 

27
00:02:04,336 --> 00:02:08,336
under my picture at the moment. And you'll see that it's starting to load data from 

28
00:02:08,336 --> 00:02:14,169
an external source. And the idea of that external source is that it would be an N8N, 

29
00:02:14,203 --> 00:02:19,503
workflow, but that's something that I can swap between by being on mock. At the moment 

30
00:02:19,503 --> 00:02:24,169
it's fake data. When I click this button, it becomes live data, which would be the 

31
00:02:24,169 --> 00:02:29,436
N8N, workflow. And all these capabilities that you're seeing were all done over a 

32
00:02:29,436 --> 00:02:34,936
series of individual steps that were well documented, and the AI pair programmer 

33
00:02:34,936 --> 00:02:36,670
wrote all the code itself.

34
00:02:36,703 --> 00:02:42,170
So let's step back to the AI retrospective and how I was putting this particular 

35
00:02:42,170 --> 00:02:48,270
application together using a concept called the Bmad Method. And what the bmad method 

36
00:02:48,270 --> 00:02:54,270
is is based off this video series that I saw called Bmad Code, and there's a GitHub 

37
00:02:54,270 --> 00:03:00,070
repo related to it. You can see here, it's an AI powered Agile development framework, 

38
00:03:00,337 --> 00:03:05,337
which will take your requirements document and break it up into concepts known as 

39
00:03:05,404 --> 00:03:10,571
epics. And when we look at our requirements document here, we can see that I went 

40
00:03:10,571 --> 00:03:16,171
through a bunch of epics and each of them will have a list of stories to be executed. 

41
00:03:16,271 --> 00:03:22,171
And you just feed these stories one at a time into an AI pair programmer and it starts 

42
00:03:22,171 --> 00:03:27,071
writing the code for you. So when we look at the technology stack, which was Epic 

43
00:03:27,071 --> 00:03:31,404
one, there were a bunch of stories and that gave this application the ability to 

44
00:03:31,404 --> 00:03:31,938
work with, 

45
00:03:31,971 --> 00:03:35,404
react Shad, cn, tailwind, CSS, vite, 

46
00:03:35,738 --> 00:03:40,838
different technologies like that. When I got to Epic two, we got the application 

47
00:03:40,838 --> 00:03:45,338
shell, which is all the stuff that we're seeing with the menus on the left. We've 

48
00:03:45,338 --> 00:03:49,971
got little quick search concepts that we can pop up. They're not yet styled. We've 

49
00:03:49,971 --> 00:03:54,872
got a little light and dark mode. Again, there's some styling issues going on. But 

50
00:03:54,872 --> 00:04:01,038
then I moved on to the main styling, which is what I needed for the main wizard. 

51
00:04:01,072 --> 00:04:06,338
And we're seeing that wizard here now as I was developing it, it's essentially a 

52
00:04:06,338 --> 00:04:11,005
human in the loop agent wizard backed by N8N workflows. 

53
00:04:11,205 --> 00:04:16,272
So when I started this feature, known as an epic, I had seven different stories. 

54
00:04:16,272 --> 00:04:21,172
And the first story was this first page that you're seeing right here. And then as 

55
00:04:21,172 --> 00:04:25,806
soon as you loaded in data, you could move on to the next page, which would be the 

56
00:04:25,806 --> 00:04:31,972
second story. And so since there were six different wizard pages plus a final page, 

57
00:04:32,072 --> 00:04:37,239
we had seven stories. But by the time I got to the end of writing all the code, once 

58
00:04:37,239 --> 00:04:43,473
I thought of things like the modal dialog, talking to N8N,, talking to mock data, 

59
00:04:43,473 --> 00:04:48,873
we ended up with 13 different stories going on, and I had to shift things around 

60
00:04:48,873 --> 00:04:51,873
a little bit during the conversational process.

61
00:04:51,873 --> 00:04:57,540
Now, I will point out that the experience of writing code would BMAD and Claude Code,, 

62
00:04:57,540 --> 00:05:02,373
and just following through on these stories allowed me to create all these commits, 

63
00:05:02,373 --> 00:05:08,107
and each individual commit was done almost in a one shot prompt, in which Claude 

64
00:05:08,107 --> 00:05:12,540
would just go through and work through the different items. At the end of it, I'd 

65
00:05:12,540 --> 00:05:17,040
put in a little bit of information to say, please create this fancy commit message 

66
00:05:17,040 --> 00:05:22,340
that you're seeing, commit it to the repository, push it all the way up, and sometimes 

67
00:05:22,340 --> 00:05:29,107
I'd forget. So this one I forgot to do 4.6. So 4.6 and 4.7 went up together. And 

68
00:05:29,107 --> 00:05:33,541
this happened a couple of times. But essentially it was writing code. It was writing 

69
00:05:33,541 --> 00:05:38,774
documentation like you're seeing right here, and all of it without me actually having 

70
00:05:38,774 --> 00:05:39,941
to write any code.

71
00:05:39,941 --> 00:05:45,141
Now before we do the retrospective, if you're actually interested in seeing how I'm 

72
00:05:45,141 --> 00:05:51,408
building a human in the loop agent based AI workflow application, and it's all done 

73
00:05:51,408 --> 00:05:57,041
using the Bmad method and Claude Code,. Then check out the video down below. But 

74
00:05:57,041 --> 00:06:01,708
for now, let's have a look at what this document is that it created. So

75
00:06:01,708 --> 00:06:06,808
at the moment we're looking at epic four, which is a list of all the stories that 

76
00:06:06,808 --> 00:06:12,575
it went through as it was developing the software. Now, the stories are not the actual 

77
00:06:12,575 --> 00:06:19,075
stories that Claude Code, worked with. What these are are summaries that are expanded 

78
00:06:19,075 --> 00:06:21,275
just before it's about to write the code.

79
00:06:21,275 --> 00:06:26,808
So whenever my AI pair programmer Claude Code, in this case was going to work on 

80
00:06:26,808 --> 00:06:32,409
a particular story, it would go and create a new story in the stories folder and 

81
00:06:32,409 --> 00:06:37,909
it be the same information, just way more expanded. We've got a lot of extra information, 

82
00:06:37,909 --> 00:06:42,475
including a section right at the beginning called Definition of Done, and this would 

83
00:06:42,475 --> 00:06:47,709
be a checked off list of the things that were done in that story. So now we have 

84
00:06:47,709 --> 00:06:51,742
a complete record of what we created, what was done, and we've got that repeated 

85
00:06:51,742 --> 00:06:53,009
for every story.

86
00:06:53,042 --> 00:06:58,509
So knowing that, let's have a look through the retrospective analysis prompt. And 

87
00:06:58,509 --> 00:07:04,376
we've got this idea that you're conducting a retrospective analysis on epic for the 

88
00:07:04,409 --> 00:07:09,709
guided incident capture workflow and that there are objectives. We've got process 

89
00:07:09,743 --> 00:07:16,343
improvements, requirements analysis, technical insights, and a look at the Bmad method. 

90
00:07:16,576 --> 00:07:20,843
Now it's looking at how it can do that. So it can use data gathering through 

91
00:07:20,843 --> 00:07:22,843
the GIT based analysis.

92
00:07:22,843 --> 00:07:28,410
The documentation analysis which is just looking at all those documents we just mentioned, 

93
00:07:28,443 --> 00:07:33,543
including the Claude doc. It can also go and look through all the commit messages.

94
00:07:33,577 --> 00:07:39,110
And it can go through the code base analysis by starting from the initial commit 

95
00:07:39,110 --> 00:07:43,977
for the epic and going through and looking at the last one. So it's got different 

96
00:07:43,977 --> 00:07:47,044
areas that it's going to analyze for us

97
00:07:47,044 --> 00:07:51,210
with the idea of building up a summary, what went well and what we can improve in 

98
00:07:51,210 --> 00:07:51,977
the future.

99
00:07:51,977 --> 00:07:57,010
So when we look at the specific insights, there's a lot of them going on. But I think 

100
00:07:57,010 --> 00:08:02,377
the best thing is we'll just head down to a terminal and I often run a little alias 

101
00:08:02,377 --> 00:08:07,544
called Claude Sonnet to run it with the sonnet model. But for this, we'll go straight 

102
00:08:07,544 --> 00:08:12,144
into Claude, which should default to the Opus model. And I'm also gonna press shift 

103
00:08:12,144 --> 00:08:19,044
tab, 'cause I want to go into planning mode to do this. And I'm gonna say, can you 

104
00:08:19,411 --> 00:08:21,678
run a retrospective? 

105
00:08:21,678 --> 00:08:27,378
And with that we'll put in the at sign type in retrospective and it should find the 

106
00:08:27,378 --> 00:08:30,578
file we want. It's right there and we'll press enter. 

107
00:08:30,578 --> 00:08:35,045
At this point, it's starting to run. We'll just bring up the terminal a little bit 

108
00:08:35,378 --> 00:08:40,211
and it should come up with a little plan of action before it starts executing. 

109
00:08:40,211 --> 00:08:44,412
it's looking at gathering information using the Git log. 

110
00:08:44,645 --> 00:08:49,412
It's wanting to read all the stories, starting with the number four.

111
00:08:49,412 --> 00:08:55,345
So here's the plan of action. It's analyzed 13 different commits. We've got 82 file 

112
00:08:55,345 --> 00:09:04,279
changes. We've got 13 stories review, all 13 stories, 4.1 through 4.13. Now, one 

113
00:09:04,279 --> 00:09:09,279
of the things that I'm a little confused about is that when we look at this area, 

114
00:09:09,279 --> 00:09:17,179
we've got 4.7 all the way through to 4.13, and maybe we don't have enough. So what 

115
00:09:17,179 --> 00:09:23,646
I'm going to do is just say no and say the stories you picked start at 4.7 and go 

116
00:09:23,646 --> 00:09:25,746
through to 4.13, 

117
00:09:25,746 --> 00:09:32,846
but you have not gone through 4.1 to 4.6. So maybe it has done that because part 

118
00:09:32,846 --> 00:09:38,913
of the plan mentioned it, but it never mentioned it in the details. So I'd like to 

119
00:09:38,913 --> 00:09:45,146
just be a little bit more complete before we move on. So now it's reading that particular 

120
00:09:45,146 --> 00:09:50,480
file, and that was what I was noticing as it was reading individual files that these 

121
00:09:50,480 --> 00:09:53,146
early stories weren't being read into memory. 

122
00:09:53,146 --> 00:09:57,047
And that's interesting. It's going to loop through a bunch of those files. I think 

123
00:09:57,047 --> 00:09:59,313
it's combining them all into 

124
00:09:59,313 --> 00:10:00,347
one output. 

125
00:10:00,347 --> 00:10:03,213
we can see the commits being read right here, 

126
00:10:03,213 --> 00:10:10,247
and it's reporting that it has a complete plan with everything from four one to 4, 1 3. 

127
00:10:10,280 --> 00:10:14,480
We've got all them listed. We've got the description of what they all do. 

128
00:10:14,880 --> 00:10:20,847
So this is the plan of action of what it's going to do. Create an epic four retrospective 

129
00:10:20,880 --> 00:10:26,214
document structure, which is great. It's a retrospective, so it's not going to alter 

130
00:10:26,214 --> 00:10:28,247
the original epic. 

131
00:10:28,247 --> 00:10:32,014
We're going to have an executive summary. What went well, what could have been improved, 

132
00:10:32,047 --> 00:10:35,981
key insights and actionable recommendations.

133
00:10:35,981 --> 00:10:40,514
So it's created the document. Let's go have a look at this in VS code. 

134
00:10:40,514 --> 00:10:46,648
it out to say the Epic four retrospective guided incident capture workflow. That's 

135
00:10:46,648 --> 00:10:50,848
what we were working on. We got an executive summary that states that 

136
00:10:50,848 --> 00:10:57,948
Epic four was delivered. It was done using 13 stories and it was done over six days, 

137
00:10:58,048 --> 00:11:03,748
and that's about right. So I was spending about 40 minutes to 60 minutes each day 

138
00:11:03,748 --> 00:11:04,681
just working on this. 

139
00:11:04,681 --> 00:11:12,082
So essentially about two to three stories a day in an hour each. It took six days. 

140
00:11:12,448 --> 00:11:18,015
We've got this stories completed, 13, and it says that the original was 11. That's 

141
00:11:18,015 --> 00:11:22,715
not actually correct. It was only about seven. So I know there's something going 

142
00:11:22,715 --> 00:11:28,349
on here, but the rest of this document, which I've had a bit of a look through, is 

143
00:11:28,349 --> 00:11:33,849
pretty useful to me. Now, from your point of view, if you are doing a retrospective, 

144
00:11:33,849 --> 00:11:39,516
what you're going to read here is useful, but it will be totally different from your 

145
00:11:39,516 --> 00:11:44,782
situation. The main goal that we're trying to achieve here is understand where we 

146
00:11:44,782 --> 00:11:50,049
can make improvements to the AI workflows in the future. So let's just have a quick 

147
00:11:50,116 --> 00:11:51,849
look at some other areas in here.

148
00:11:51,849 --> 00:11:58,183
So on June 17, 18 and 19, which is when the original part of the wizard was in place, 

149
00:11:58,183 --> 00:12:04,416
capturing of data across six pages and showing a final clarification. And what I 

150
00:12:04,416 --> 00:12:10,383
hadn't thought of through properly was test data, enhancing it using an API using 

151
00:12:10,450 --> 00:12:16,916
a mock so I could go between mop data and also go through the N8N workflow. And then 

152
00:12:16,916 --> 00:12:22,117
just doing some UX improvements is all the extra stories that got added on. 

153
00:12:22,117 --> 00:12:27,883
Now, where it went well is that in EPIC two, which is where I designed how the wizard 

154
00:12:27,883 --> 00:12:33,617
could work without any implementation of pages. And it was able to use that framework 

155
00:12:33,617 --> 00:12:37,550
quite successfully to build the seven wizard steps 

156
00:12:37,550 --> 00:12:42,117
when it was doing the first clarification. And this was essentially going off to 

157
00:12:42,117 --> 00:12:47,817
the server to rework some of the data that was input using a large language model, 

158
00:12:48,017 --> 00:12:53,651
was using this ugly little spinner. And I turned it into a clarification step. There 

159
00:12:53,651 --> 00:12:55,317
was also a modal dialogue 

160
00:12:55,384 --> 00:12:59,817
that refactor proved to be really useful across multiple pages. 

161
00:12:59,817 --> 00:13:05,851
I think this statement here is also really useful and shows why the BM a method was 

162
00:13:05,851 --> 00:13:10,984
really good. So it would have these acceptance criteria, it would have the definition 

163
00:13:10,984 --> 00:13:15,818
of done that would get checked off. And so I never saw it going off and doing stuff 

164
00:13:15,818 --> 00:13:17,385
that I never asked it to do. 

165
00:13:17,418 --> 00:13:20,985
And this is really powerful, the adaptive development, because there were a bunch 

166
00:13:20,985 --> 00:13:23,451
of things that I forgot and I'll show you the screen. 

167
00:13:23,485 --> 00:13:28,551
so popping over to the wizard. These forms were all in scope, but this little button 

168
00:13:28,551 --> 00:13:34,518
here to provide test data wasn't. So when I press that button, we get new test data. 

169
00:13:34,752 --> 00:13:40,152
Now as I move through, we got test data filled in and I'll go one more step where 

170
00:13:40,152 --> 00:13:44,752
it's working with mop data and then you'll notice there's no test data here. But 

171
00:13:44,785 --> 00:13:49,352
I was able to add a second state to this so that when I click it one more time, it 

172
00:13:49,352 --> 00:13:54,319
fill in additional test data. 'cause the idea of this is an MVP, I don't need 

173
00:13:54,352 --> 00:14:00,152
to have it work against N8N, I can go from the mock view, which is using a little 

174
00:14:00,152 --> 00:14:05,619
JSON structure behind the scenes to actually talking to an N8N server. 

175
00:14:05,652 --> 00:14:10,086
And it's those little concepts that this adaptive development are talking about, 

176
00:14:10,119 --> 00:14:15,052
adding the API toggle the, this sort of stuff was not thought of and it was easy 

177
00:14:15,052 --> 00:14:19,553
to add in. Another thing that was really useful in this, as I was using this Zustand 

178
00:14:19,986 --> 00:14:24,819
to store the designs, the shape of the data, and this worked really well, 

179
00:14:24,819 --> 00:14:31,353
So I never specified the names of the fields in the API at all. And that ran into 

180
00:14:31,353 --> 00:14:36,553
a problem and it's actually identified that by the changes I had to make mid epic.

181
00:14:36,586 --> 00:14:41,453
So worked out some of the things that I hadn't fully worked through with the ux. 

182
00:14:41,520 --> 00:14:47,120
It's then mentioned the size of the stories and it's got this idea of combined judo 

183
00:14:47,153 --> 00:14:51,153
type coupling. I'm not sure that anything really could have been improved here. So 

184
00:14:51,153 --> 00:14:54,453
some of this is informational and not to be acted on, 

185
00:14:54,453 --> 00:14:58,253
and now it's starting to point out information in the code base. This is pretty good 

186
00:14:58,253 --> 00:15:04,154
actually. The API service layer is mixing concerns. So we've got configurations of 

187
00:15:04,354 --> 00:15:09,087
an if statement as to whether it should be mock or live. I assume we've got a little 

188
00:15:09,087 --> 00:15:14,921
bit of code that's inside as an IF statement. So this is at least telling us information 

189
00:15:14,921 --> 00:15:17,654
in the future that we can improve our code base on. 

190
00:15:17,654 --> 00:15:23,121
It's mentioned the missing abstraction, especially this repeated clarification UI 

191
00:15:23,121 --> 00:15:28,621
logic. Essentially at one stage in the development it was repeating the code on each 

192
00:15:28,688 --> 00:15:30,088
of the wizard pages. 

193
00:15:30,321 --> 00:15:34,288
And it's also highlighting something that I haven't done and it wasn't part of the 

194
00:15:34,288 --> 00:15:36,288
MVP and that's unit tests. 

195
00:15:36,354 --> 00:15:41,988
So this one line here, the API contract importance makes it really useful. If we 

196
00:15:42,055 --> 00:15:46,988
are doing another epic and I, I will be moving on to epic five, which is a different 

197
00:15:47,021 --> 00:15:53,121
wizard and it will have its own contract. So I now have some guidance from this document 

198
00:15:53,155 --> 00:15:58,355
which I could apply to the Epic five document to say is there anything that we learnt 

199
00:15:58,355 --> 00:16:01,255
here that could improve the current Epic? 

200
00:16:01,255 --> 00:16:05,988
So all of this just keeps going on. I read it, I thought some of it I dismissed, 

201
00:16:05,988 --> 00:16:11,089
some of it I thought was accurate. There were the odd hallucinations going on. It 

202
00:16:11,089 --> 00:16:17,055
was really good that it worked out a state management pattern using Zustand 'cause 

203
00:16:17,055 --> 00:16:21,155
that was not thought of at the beginning of this. I personally am not a JavaScript 

204
00:16:21,155 --> 00:16:25,089
developer, so I don't come from the background of knowing exactly what 

205
00:16:25,122 --> 00:16:26,056
I need to implement, 

206
00:16:26,056 --> 00:16:30,922
I wanted to do a retrospective to point out what I don't currently know in this sort 

207
00:16:30,922 --> 00:16:31,856
of code flow. 

208
00:16:31,889 --> 00:16:34,289
We've got this new handle next, 

209
00:16:34,322 --> 00:16:39,322
enhancement pattern that's going to be useful in the next wizard that we put in place. 

210
00:16:39,356 --> 00:16:44,823
And here we can see this if statement around whether it should use the mock data 

211
00:16:44,823 --> 00:16:50,323
or should use the real data. Maybe this is an area that I could guide it by using 

212
00:16:50,323 --> 00:16:55,156
the inversion of control pattern rather than this if statement. But I think the code's 

213
00:16:55,156 --> 00:16:57,990
pretty small and easy to read at the moment. 

214
00:16:58,023 --> 00:17:04,090
And so at this point it starts going on to an analysis of the BMAD method. Now the 

215
00:17:04,090 --> 00:17:08,856
other thing to note, this is the first time I've used BMAD I was learning myself 

216
00:17:08,856 --> 00:17:14,457
and in the meantime they've moved from version three to version four yesterday. So 

217
00:17:14,457 --> 00:17:19,257
the next time I do a video I'm gonna go through this method again and I'll understand 

218
00:17:19,257 --> 00:17:22,857
it a lot more. But when I look at the weaknesses that are listed here, 

219
00:17:22,890 --> 00:17:28,024
I don't see anything in this list that I actually had to worry about. So I'm not 

220
00:17:28,024 --> 00:17:31,724
looking at any weaknesses so far the way this has happened 

221
00:17:31,757 --> 00:17:37,557
now, I found the planning of these first six stories. It was excellent, it was great. 

222
00:17:37,857 --> 00:17:43,491
This idea that I had to be reactive and change things around and sometimes that meant 

223
00:17:43,524 --> 00:17:45,157
inserting stories, 

224
00:17:45,191 --> 00:17:46,691
ahead of others and having to renumber. 

225
00:17:47,357 --> 00:17:49,024
That was a little bit of a challenge. 

226
00:17:49,024 --> 00:17:52,758
And then we'd get this estimation accuracy. And this is where things are a little 

227
00:17:52,758 --> 00:17:57,991
bit out of whack. These numbers in these two cells are not quite correct because 

228
00:17:57,991 --> 00:18:00,758
I don't believe they were there originally Anyway.

229
00:18:00,791 --> 00:18:06,258
Now this next section, which is all about the documentation created by the Bmad method 

230
00:18:06,358 --> 00:18:12,391
is actually really useful. So when the epic planning is being done and the improvement 

231
00:18:12,391 --> 00:18:18,625
is to have the developer experience stories built in. So what happens with test data 

232
00:18:18,658 --> 00:18:23,458
development, tool workflows, debugging utilities, so that could be logging, stuff 

233
00:18:23,458 --> 00:18:28,925
like that. And is there any local development setup requirements? So some of the 

234
00:18:28,925 --> 00:18:33,892
things that I think I was changing along the way was also ensuring that it was using 

235
00:18:33,925 --> 00:18:35,392
a linter correctly. 

236
00:18:35,425 --> 00:18:40,192
And this area I really wasn't working on. So I didn't have a flow chart for the user 

237
00:18:40,192 --> 00:18:45,325
story. There was no sequence diagram for the API. There was no state management data 

238
00:18:45,325 --> 00:18:49,992
flows. So this is useful information that could go into future planning 

239
00:18:50,025 --> 00:18:56,326
and understanding the J data contract for both the data going to the end points and 

240
00:18:56,326 --> 00:18:59,359
how it comes back is also gonna be really useful. 

241
00:18:59,359 --> 00:19:04,726
Now this area around having patterns documented is also something I've been thinking 

242
00:19:04,726 --> 00:19:10,859
about from having another repository that I merge into, any code that I'm doing that 

243
00:19:10,859 --> 00:19:17,059
has my ideas around single responsibility, principle design patterns, and just basic 

244
00:19:17,059 --> 00:19:22,160
patterns of code ready to go with. So it's suggested that we do it within this application 

245
00:19:22,160 --> 00:19:26,060
right now though. It's the sort of thing that you probably want to keep doing if 

246
00:19:26,060 --> 00:19:27,760
you're doing many applications. 

247
00:19:27,793 --> 00:19:32,260
Now, as we look at the process refinements, I want to also point out that if you 

248
00:19:32,260 --> 00:19:35,027
are using a tool that can have multiple agents, 

249
00:19:35,027 --> 00:19:40,427
what you can do is maybe have something like the architecture review, or you might 

250
00:19:40,427 --> 00:19:45,727
have something to generate unit tests being done as a subagent. So not part of the 

251
00:19:45,727 --> 00:19:51,060
normal flow, but something that happens asynchronously. So some of this information 

252
00:19:51,060 --> 00:19:56,694
that we're seeing is probably too much for me to want to take on board in the next 

253
00:19:56,694 --> 00:20:02,660
Epic, but as this continuous improvement happens, I can start thinking of them. Does 

254
00:20:02,660 --> 00:20:06,694
it go into the next Epic or does it come in from a different point of view? 

255
00:20:06,694 --> 00:20:11,927
such as every time you complete a story, do you run a separate task just around the 

256
00:20:11,927 --> 00:20:12,827
unit tests? 

257
00:20:12,827 --> 00:20:17,227
or every time you do three stories, such as they say here, do you do 

258
00:20:17,261 --> 00:20:19,128
architecture review, check-in? 

259
00:20:19,161 --> 00:20:25,561
And this is really interesting. So we could probably run this and get these extractable 

260
00:20:25,594 --> 00:20:29,728
reusable patterns put into the code base for us both here 

261
00:20:29,761 --> 00:20:35,761
And we could also ask it to go on and build these documents within the architecture 

262
00:20:35,761 --> 00:20:36,261
directory. So here we're getting a idea of the lines changed in each of the stories, 

263
00:20:36,261 --> 00:20:40,961
directory. So here we're getting a idea of the lines changed in each of the stories, 

264
00:20:40,961 --> 00:20:44,828
but it's this next one that I really love. So before the Epic, this is what it looked 

265
00:20:44,828 --> 00:20:45,528
like, A Wizard UI 

266
00:20:45,561 --> 00:20:50,062
routes. And after the Epic, this is all the new stuff that's been added.

267
00:20:50,262 --> 00:20:55,495
Now the lessons learned, which is the whole reason for doing a retrospective. Now, 

268
00:20:55,528 --> 00:21:01,462
keep in mind that this is done around a framework that I'm using called BMAD, but 

269
00:21:01,462 --> 00:21:05,229
you might be using something else. You might be just creating requirements documents. 

270
00:21:05,395 --> 00:21:10,495
You might have a PRD product requirements documents. You might have task master and 

271
00:21:10,495 --> 00:21:15,295
building out task lists. The reason I'm using BMAD is it kind of rolls all of those 

272
00:21:15,295 --> 00:21:20,862
concepts up together, and it's pointed out here that it probably should be adapted 

273
00:21:20,862 --> 00:21:27,229
to have developer experience tools. And for me, this was the automatic test or seed 

274
00:21:27,229 --> 00:21:30,563
data being populated when I needed it to happen. 

275
00:21:30,596 --> 00:21:35,863
There's also the extracting patterns, which is taking that code that's been repeated, 

276
00:21:36,129 --> 00:21:41,096
putting it into a patterns directory, and this would be an end of epic capability 

277
00:21:41,096 --> 00:21:44,096
that I'd want to do. Every time I'm working through the code base, I.

278
00:21:44,129 --> 00:21:45,196
So that was, 

279
00:21:45,196 --> 00:21:52,230
I retrospective, just to check how the progression of a successful code implementation 

280
00:21:52,396 --> 00:21:57,096
could be improved and what measures you want to take in the future. Now, if you're 

281
00:21:57,096 --> 00:22:02,363
interested in working one on one with me, you can book a call. You come to the website, 

282
00:22:02,363 --> 00:22:06,830
click on that button, and book a session. Otherwise, if you're just interested in 

283
00:22:06,830 --> 00:22:12,230
learning more about coding with Claude Code, using the Bmad method or building an 

284
00:22:12,230 --> 00:22:17,597
application a day, which is my goal, then like and subscribe on the channel I'm AppyDave. 

285
00:22:17,597 --> 00:22:18,930
I'll see you in the next video.
